import { Injectable } from '@angular/core';
import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';
import { Observable, BehaviorSubject } from 'rxjs';
import { HttpResponse } from '@angular/common/http';
import { HttpErrorResponse } from '@angular/common/http';
import { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';
import { SlimLoadingBarService } from "ng2-slim-loading-bar";
import 'rxjs/add/operator/do';
import { NgxSpinnerService } from 'ngx-spinner';
@Injectable()
export class AuthInterceptor implements HttpInterceptor {
  snapshot: RouterStateSnapshot;
  isRefreshingToken: boolean = false;
  tokenSubject: BehaviorSubject<string> = new BehaviorSubject<string>(null);
  public constructor(private router: Router,
    private _loadingBar: SlimLoadingBarService,
    private _spinner: NgxSpinnerService,

  ) {
    this.snapshot = router.routerState.snapshot;
  }

  public intercept(req: HttpRequest<any>,
    next: HttpHandler): Observable<HttpEvent<any>> {
    this._loadingBar.start();
    this._spinner.show();
    let clonedRequest: HttpRequest<any>;
    clonedRequest = req.clone({
      headers: req.headers.set("Authorization", this.jwt())
    });
    return next.handle(clonedRequest).do((event: HttpEvent<any>) => {


      if (event instanceof HttpResponse) {
        this._loadingBar.complete();
        this._spinner.hide();
        let response = event.body;
        if (response.Error) {
          //LOG

        }
      }
    },
      (err: any) => {
        if (err instanceof HttpErrorResponse) {
          this._loadingBar.complete();
          this._spinner.hide();
          if (err.status === 401) {
            // redirect to the login route
            // or show a modal
            this.router.navigate(['/login'], { queryParams: { returnUrl: this.snapshot.url, logout: true } });
            return false;
          }
        }
      });
  }

  private jwt() {
    // create authorization header with jwt token
    let currentUser = JSON.parse(localStorage.getItem('currentUser'));
    if (currentUser && currentUser.access_token) {
      return "Bearer "+ currentUser.access_token;
    }
    return "Bearer ";
  }
}
